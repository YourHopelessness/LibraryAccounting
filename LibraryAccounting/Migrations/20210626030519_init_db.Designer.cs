// <auto-generated />
using System;
using LibraryAccounting.Properties.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LibraryAccounting.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20210626030519_init_db")]
    partial class init_db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("LibraryAccounting.Entities.Books", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<int>("ISBN")
                        .HasColumnType("integer");

                    b.Property<string>("PublishedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publishedBy");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publishedDate");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("statusId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasAlternateKey("ISBN")
                        .HasName("isbn");

                    b.HasIndex("StatusId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.BooksStatuses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statusName");

                    b.HasKey("Id");

                    b.ToTable("BooksStatuses");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.Changes", b =>
                {
                    b.Property<Guid>("ChangemakerId")
                        .HasColumnType("uuid")
                        .HasColumnName("changemakerId");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("bookId");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changeDate");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.HasKey("ChangemakerId", "BookId", "ChangeDate");

                    b.HasIndex("BookId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.DbLogin", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employeeId");

                    b.HasKey("UserName", "Password", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Auth");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.Emloyees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("text")
                        .HasColumnName("personalEmail");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<string>("WorkEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workEmail");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.Reservations", b =>
                {
                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("readerId");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("bookId");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reservationDate");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("returnDate");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<bool>("ReturningFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("returningFlag");

                    b.HasKey("ReaderId", "BookId", "ReservationDate", "ReturnDate");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("descriprion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.UserRoles", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employeeId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleId");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("LibraryAccounting.Entities.Books", b =>
                {
                    b.HasOne("LibraryAccounting.Entities.BooksStatuses", null)
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAccounting.Entities.Changes", b =>
                {
                    b.HasOne("LibraryAccounting.Entities.Books", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAccounting.Entities.Emloyees", null)
                        .WithMany()
                        .HasForeignKey("ChangemakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAccounting.Entities.DbLogin", b =>
                {
                    b.HasOne("LibraryAccounting.Entities.Emloyees", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAccounting.Entities.UserRoles", b =>
                {
                    b.HasOne("LibraryAccounting.Entities.Emloyees", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAccounting.Entities.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
